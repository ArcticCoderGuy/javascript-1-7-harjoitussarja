# TehtÃ¤vÃ¤ 1a "paja"-sanahaku merkkijonosta

TehtÃ¤vÃ¤ssÃ¤ 1a etsitÃ¤Ã¤n merkkijonosta sana "paja" ja siirretÃ¤Ã¤n se uuteen muuttujaan, jos se lÃ¶ytyy. Kirjoitan ensin pseudokoodin, koska haluan ymmÃ¤rtÃ¤Ã¤ **MIKSI** asiat toimivat, ei pelkÃ¤stÃ¤Ã¤n **MITEN**.

TÃ¤mÃ¤ ajattelutapa hidastaa alussa, mutta tekee tyÃ¶stÃ¤ nopeampaa ja laadukkaampaa myÃ¶hemmin aivan kuten missÃ¤ tahansa asiassa.



 Pseudokoodi 

1. Asetetaan alkuperÃ¤inen merkkijono, esimerkiksi     
   "asuntokionapajaa"`.  
   Koska arvo ei muutu, kÃ¤ytetÃ¤Ã¤n `const` â†’ muuttuja nimeltÃ¤ `mystinenSana`.

2. Alustetaan uusi muuttuja nimeltÃ¤ `uusiMuuttuja`, johon 
   sijoitetaan tulos, **jos** ehto tÃ¤yttyy. TÃ¤mÃ¤ on hyvÃ¤ esimerkki muuttujasta, joka voi muuttua, joten kÃ¤ytetÃ¤Ã¤n `let`.

3. Tarkistetaan ja tehdÃ¤Ã¤n logiikkalause:
   - EsiintyykÃ¶ sana `"paja"` alkuperÃ¤isessÃ¤ merkkijonossa `mystinenSana`?

   - Jos lÃ¶ytyy:
     - SiirretÃ¤Ã¤n `"paja"` muuttujaan `uusiMuuttuja`
     - Tulostetaan molemmat merkkijonot konsoliin
   - Jos ei lÃ¶ydy:
     - Tulostetaan `"Sanaa ei lÃ¶ytynyt"` konsoliin
     - Ohjelman suoritus pÃ¤Ã¤ttyy

---

 Miksi miksi ?

Merkkijonojen kÃ¤sittely on yksi tÃ¤rkeimmistÃ¤ ohjelmoinnin perusteista. Pseudokoodin avulla hahmotan selkeÃ¤sti mitÃ¤ tavoitellaan, ilman ettÃ¤ jÃ¤Ã¤n kiinni syntaksin yksityiskohtiin.  
Kun ajattelu toimii, koodin kirjoitus on pelkkÃ¤Ã¤ ilmaisua.

// if (originalString.includes("paja") !==-1) 
Kun asiaa tutkin niin "paljastui" ettÃ¤ tÃ¤hÃ¤n ei ole mtÃ¤Ã¤n muuttujaa sellaisenaan saatavana vaan on Ã¤lyttÃ¤vÃ¤ rakentaa sopiva logiikkaehto. Logiikkaehtoon kÃ¤ytin kyllÃ¤ AI:ta, koska en ole vielÃ¤ niin hyvÃ¤, ettÃ¤ voisin itse johtaa noita logiikkalauseita kun asia on kuitenkin uusi. Opittiin kuitenkin taas uutta ja saatiin koodia aikaiseksi sekÃ¤ omaa osaamista kehitettyÃ¤.

Koko roskan ajoin sitten Node.js:llÃ¤ jonka , koska se oli niin helppoa ja nopeaa. Otin https://nodejs.org/en ja asensin sen ja kun kone herjasi ettÃ¤ "niitÃ¤ lupia ei sitten kyllÃ¤ ollutkaan" niin ajoin sitten powershell:ssÃ¤ "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser" ja sitten toimii.

Ajettin Node.js:llÃ¤ ja saatiin tulos aikaiseksi.
```javascript  


TehtÃ¤ssÃ¤ 1b etsitÃ¤Ã¤n/luetaan joka kolmas merkki mystinenSana joka tulee muutujaksi uusiMuuttuja. Jos merkki on "a" niin se muuttuu "*". Muuta merkkijono bold/uppercase-tyyliksi.

Tulostan tehtÃ¤vÃ¤n tuloksen konsoliin ja testaan sekÃ¤ committaan sen GitHubiin.

Pseudokoodi:

Tee alkuperÃ¤inen merkkijono
Tee tyhjÃ¤ merkkijono johon kerÃ¤tÃ¤Ã¤n tulos

KÃ¤y kaikki kirjaimet lÃ¤pi
  Jos tÃ¤mÃ¤ on joka kolmas kirjain
    Jos kirjain on 'a'
      LisÃ¤Ã¤ tulokseen '*'
    Muuten
      LisÃ¤Ã¤ tulokseen tÃ¤mÃ¤ kirjain

Muuta tulos isoiksi kirjaimiksi
Tulosta tulos


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         20.5.2025     15.29           2826 README
-a----         19.5.2025     23.47            400 task1a-substring-search.js
-a----         20.5.2025     15.34            575 task1b-every-third-char.js
-a----         19.5.2025     13.00             56 task2a-age-validation.js
-a----         19.5.2025     13.00             47 task2b-age-loop.js
-a----         19.5.2025     13.00             42 task2c-age-switch.js
-a----         19.5.2025     13.00             46 task3-array-operations.js
-a----         19.5.2025     13.00             51 task4-flower-class.js
-a----         19.5.2025     13.00             43 task5-current-date.js
-a----         19.5.2025     13.00             49 task6-dom-text-insert.js
-a----         19.5.2025     13.00             47 task7-dom-table-insert.js


PS C:\Users\HP\javascript-1-7-harjoitussarja> node task1b-every-third-char.js
Origin string: asuntokionapajaa
Every 3 letter transformed: UOOP*


----------------


TEHTÃ„VÃ„ 2


TehtÃ¤vÃ¤ 2  SyÃ¶tteen kysyminen ja ehdollinen toisto

TehtÃ¤vÃ¤n tavoite:

PyytÃ¤Ã¤ kÃ¤yttÃ¤jÃ¤ltÃ¤ ikÃ¤Ã¤ niin kauan, kunnes se on vÃ¤lillÃ¤ 18-22

Kun ikÃ¤ on vÃ¤lillÃ¤ 18-22, tulosta jotain iÃ¤n perusteella

Pseudokoodi

1. Kysy kÃ¤yttÃ¤jÃ¤ltÃ¤ ikÃ¤ (kÃ¤yttÃ¤en prompt-tyyppistÃ¤ tapaa)

2. Toista niin kauan kunnes ikÃ¤ on vÃ¤lillÃ¤ 18-22:
    - Jos ikÃ¤ on liian pieni tai iso â†’ kysy uudelleen

3. Kun oikea ikÃ¤ saatu:

    - Tarkista iÃ¤n perusteella mitÃ¤ tulostetaan:
      - Jos 18 â†’ nuori padawan
      - Jos 22 â†’ vanha viisas
      - Jne...

4. Tulosta ikÃ¤ + sanallinen arvio



Testaus: 

PS C:\Users\HP\javascript-1-7-harjoitussarja> node task2a-age-validation.js

Set age between 18 - 22: 18
18 : Young Padawan ðŸ‘¶

PS C:\Users\HP\javascript-1-7-harjoitussarja> node task2a-age-validation.js

set age between 18 - 22: 45
Invalid age, try again.
Set age between 18 - 22: 22
22 : Old ðŸ˜Š

PS C:\Users\HP\javascript-1-7-harjoitussarja> 



---------

TehtÃ¤vÃ¤ 3

 TehtÃ¤vÃ¤nmÃ¤Ã¤rittely: Task 3 â€“ Taulukon luonti, kopiointi, laajennus ja haku

a) Luo taulukko elÃ¤imistÃ¤
Luo taulukko, jossa on aluksi: "Dog", "Horse", "Cow"

Tulosta taulukko kokonaisuutena

Muunna taulukko merkkijonoksi kÃ¤yttÃ¤en pilkkua

b) Kopioi alkuperÃ¤inen taulukko
KÃ¤ytÃ¤ map()-metodia kopiointiin

LisÃ¤Ã¤ uuteen taulukkoon kaksi uutta elÃ¤intÃ¤: "Cat", "Sheep"

c) Etsi sana "Cow" uudesta taulukosta
Etsi Cow uudesta taulukosta

Jos lÃ¶ytyy â†’ tulosta "Cow, Founded"

d) Testaa myÃ¶s sanalla jota ei ole
Kokeile esim. "CowS"

Jos ei lÃ¶ydy â†’ tulosta "CowS, Not founded"


PSEUDOKOODI

1. Luo alkuperÃ¤inen taulukko:
   elÃ¤imet = ["Dog", "Horse", "Cow"]
   Tulosta elÃ¤imet
   Tulosta elÃ¤imet merkkijonona pilkulla eroteltuna

2. Kopioi alkuperÃ¤inen taulukko uuteen muuttujaan:
   uusiTaulukko = elÃ¤imet.map jokainenElÃ¤in -> palauta jokainenElÃ¤in
   LisÃ¤Ã¤ "Cat" ja "Sheep" uuteen taulukkoon

3. Hae "Cow" uudesta taulukosta:
   Jos uusiTaulukko sisÃ¤ltÃ¤Ã¤ "Cow":
       Tulosta "Cow, Founded"
   Muuten:
       Tulosta "Cow, Not founded"

4. Testaa sana "CowS":
   Jos uusiTaulukko sisÃ¤ltÃ¤Ã¤ "CowS":
       Tulosta "CowS, Founded"
   Muuten:
       Tulosta "CowS, Not founded"



  Testaus: 

Eli sain tÃ¤mÃ¤n vastukseksi:

"PS C:\Users\HP\javascript-1-7-harjoitussarja> node task3-array-operations.js 
Array: [ 'Dog', 'Horse', 'Cow' ]
ArrayStr: Dog,Horse,Cow
New array: [ 'Dog', 'Horse', 'Cow', 'Cat', 'Sheep' ]
Search result: Cow, Founded
Search result: CowS, Not founded

PS C:\Users\HP\javascript-1-7-harjoitussarja> "

